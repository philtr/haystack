#!/bin/bash

# Haystack: A tmux-based process management tool for development environments
# https://github.com/philtr/haystack

# Version of the script
VERSION="0.2.0"

# GitHub raw file URL
GITHUB_RAW_URL="https://raw.githubusercontent.com/philtr/haystack/main/haystack"

# Colors from Tailwind CSS
# These color codes are used for styling the tmux interface
SLATE_200="#e2e8f0"
SLATE_300="#cbd5e1"
SLATE_600="#475569"
SLATE_700="#334155"
SLATE_800="#1e293b"
INDIGO_400="#818cf8"
INDIGO_500="#6366f1"
INDIGO_600="#4f46e5"
WHITE="#ffffff"
GREEN_500="#22c55e"

# Function to compare semantic versions
version_gt() {
	test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

# Extract version from a file
extract_version() {
	sed -n 's/^VERSION="\(.*\)"/\1/p' "$1"
}

# Function to update the script
update_script() {
	local force_update=false
	if [[ "$1" == "--force" ]]; then
		force_update=true
	fi

	echo "Checking for updates..."
	local temp_file
	temp_file=$(mktemp)
	if curl -sS "$GITHUB_RAW_URL" -o "$temp_file"; then
		if [[ -s "$temp_file" ]]; then
			local current_file="$0"
			local current_version
			current_version=$(extract_version "$current_file")
			local new_version
			new_version=$(extract_version "$temp_file")

			if [[ -z "$current_version" || -z "$new_version" ]]; then
				echo "Error: Unable to extract version information."
				rm "$temp_file"
				exit 1
			fi

			if $force_update || version_gt "$new_version" "$current_version"; then
				if $force_update; then
					echo "Force updating from version $current_version to $new_version."
				else
					echo "New version $new_version available. Current version is $current_version."
				fi
				if mv "$temp_file" "$current_file"; then
					chmod +x "$current_file"
					echo "Haystack has been updated successfully to version $new_version."
					exit 0
				else
					echo "Error: Failed to replace the current script. Please run with sudo or check permissions."
					rm "$temp_file"
					exit 1
				fi
			else
				echo "Current version $current_version is up to date. Use '--update --force' to force an update."
				rm "$temp_file"
				exit 0
			fi
		else
			echo "Error: Downloaded file is empty. Update aborted."
			rm "$temp_file"
			exit 1
		fi
	else
		echo "Error: Failed to download the latest version. Please check your internet connection."
		rm "$temp_file"
		exit 1
	fi
}

# Function to load environment variables from a file
# This allows the script to use environment-specific configurations
load_env() {
	local env_file=$1
	if [ -f "$env_file" ]; then
		while IFS= read -r line || [[ -n "$line" ]]; do
			# Process non-comment lines containing key-value pairs
			if [[ $line =~ ^[^#]+=.* ]]; then
				var_name="${line%%=*}"
				var_value="${line#*=}"
				# Trim leading and trailing whitespace
				var_value=$(echo "$var_value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
				# Remove surrounding quotes if present
				var_value=$(echo "$var_value" | sed -e 's/^"\(.*\)"$/\1/' -e "s/^'\(.*\)'$/\1/")
				# Export the environment variable
				export "$var_name=$var_value"
			fi
		done <"$env_file"
	fi
}

# Function to create tmux configuration
# This generates a temporary tmux config file with custom styling and key bindings
create_tmux_config() {
	local tmux_conf
	tmux_conf=$(mktemp)
	cat <<-EOF >"$tmux_conf"
		# Set the default terminal and enable mouse support
		set-option -g default-terminal "screen-256color"
		set-option -g mouse on

		# Prevent tmux from renaming windows automatically
		set-option -g allow-rename off

		# Set status bar colors
		set-option -g status-style "bg=${SLATE_800},fg=${SLATE_300}"

		# Set left side of status bar (session name with green background)
		set-option -g status-left-length 40
		set-option -g status-left "#[fg=${SLATE_800},bg=${GREEN_500},bold] #S #[fg=${GREEN_500},bg=${SLATE_800},nobold]"

		# Set right side of status bar (quit instructions and Haystack version with indigo background)
		set-option -g status-right-length 60
		set-option -g status-right "#[fg=${INDIGO_600}]Ctrl+Q to quit #[fg=${WHITE},bg=${INDIGO_600},bold] Haystack v${VERSION} "

		# Set window styles
		set-option -g window-status-format " #[fg=${SLATE_600}]#I #[fg=${SLATE_600}]#W "
		set-option -g window-status-current-format "#[fg=${SLATE_800},bg=${INDIGO_500}]#[fg=${WHITE},bg=${INDIGO_500},bold] #I  #W #[fg=${INDIGO_500},bg=${SLATE_800},nobold]"
		set-window-option -g window-status-separator ""

		# Set pane border colors
		set-option -g pane-border-style "fg=${SLATE_600}"
		set-option -g pane-active-border-style "fg=${INDIGO_400}"

		# Set command line colors
		set-option -g message-style "fg=${SLATE_200},bg=${SLATE_700}"

		# Keep panes open after exit
		set-option -g remain-on-exit on
	EOF
	echo "$tmux_conf"
}

# Function to create bash log processing script
# This script colorizes and formats the output from each process
create_log_processor() {
	local script_path=$1
	cat <<-EOF >"$script_path"
		#!/bin/bash

		# Function to print colored text
		print_colored() {
		    local color="\$1"
		    local text="\$2"
		    local r g b
		    IFS=';' read -r r g b <<< "\$color"
		    printf "\033[38;2;%s;%s;%sm%s\033[0m" "\$r" "\$g" "\$b" "\$text"
		}

		# Array of colors for different processes
		colors=(
		    "16;185;129"   # Emerald-500
		    "245;158;11"   # Amber-500
		    "20;184;166"   # Teal-500
		    "14;165;233"   # Sky-500
		    "99;102;241"   # Indigo-500
		    "244;63;94"    # Rose-500
		    "168;85;247"   # Purple-500
		    "236;72;153"   # Pink-500
		)

		# Get process name from environment variable or use "unknown"
		name="\${PROCFILE_PROCESS_NAME:-unknown}"
		# Choose a color based on the process name
		color_index=\$(( \$(echo -n "\$name" | od -An -vtu4 -N4) % \${#colors[@]} ))
		color="\${colors[\$color_index]}"

		# Process each line of input
		while IFS= read -r line; do
		    timestamp=\$(date "+%Y-%m-%d %H:%M:%S")
		    colored_prefix=\$(print_colored "\$color" "[\$timestamp][\$name]")
		    printf "%s %s\n" "\$colored_prefix" "\$line"
		done
	EOF
	chmod +x "$script_path"
}

# Function to set up termination binding
# This creates a key binding (Ctrl+Q) to gracefully terminate all processes and clean up
setup_termination_binding() {
	local session_name=$1
	local output_dir=$2
	tmux bind-key -T root C-q run-shell "
    tmux display-message 'Shutting down Haystack...' \; \
    # Kill all pane processes
    tmux list-panes -a -F '#{pane_pid}' | xargs -I{} pkill -P {};
    sleep 2;
    # Force kill any remaining processes
    tmux list-panes -a -F '#{pane_pid}' | xargs -I{} pkill -9 -P {};
    # Remove temporary output directory
    rm -rf \"$output_dir\";
    # Kill the tmux session
    tmux kill-session -t $session_name"
}

# Function to read Procfile and start processes
# This is the core function that sets up the tmux environment and starts all processes
start_processes() {
	local procfile=$1
	local session_name
	session_name=$(basename "$PWD")

	# Create tmux configuration
	local tmux_conf
	tmux_conf=$(create_tmux_config)
	# Start a new detached tmux session
	TMUX="" tmux -f "$tmux_conf" new-session -d -s "$session_name"

	# Create a temporary directory for output files
	local output_dir
	output_dir=$(mktemp -d)

	# Create the combined output file
	local combined_output_file="$output_dir/combined_output.log"
	touch "$combined_output_file"

	# Create the log processing script
	local log_processor_script="$output_dir/log_processor.sh"
	create_log_processor "$log_processor_script"

	# Create the combined output window as the first window (index 1)
	tmux new-window -t "$session_name:1" -n "all" "tail -f $combined_output_file"

	local window_index=2
	# Read the Procfile and create windows for each process
	while IFS=: read -r name command; do
		# Create a new window for each process
		tmux new-window -t "$session_name:$window_index" -n "$name" "PROCFILE_PROCESS_NAME=\"$name\" $command"

		# Set up pipe-pane to capture and process output
		tmux pipe-pane -t "$session_name:$window_index" "PROCFILE_PROCESS_NAME=\"$name\" $log_processor_script >> \"$combined_output_file\""

		# Bind Alt+window_index to select the window
		tmux bind-key -n M-$window_index select-window -t $window_index
		((window_index++))
	done <"$procfile"

	# Bind Alt+1 to select the "all" window
	tmux bind-key -n M-1 select-window -t 1

	# Set up termination binding
	setup_termination_binding "$session_name" "$output_dir"

	# Clean up temporary tmux config file
	rm "$tmux_conf"

	# Remove the initial window (index 0)
	tmux kill-window -t "$session_name:0"

	# Select the "all" window (now index 1)
	tmux select-window -t "$session_name:1"

	# Attach to the tmux session
	tmux attach-session -t "$session_name"
}

# Main execution function
# This function ties everything together, determining which Procfile and environment file to use
main() {
	# Check for update flags
	if [[ "$1" == "--update" ]]; then
		if [[ "$2" == "--force" ]]; then
			update_script --force
		else
			update_script
		fi
	fi

	# Check for --version flag
	if [[ "$1" == "--version" ]]; then
		echo "Haystack version $VERSION"
		return
	fi

	local procfile
	procfile=${1:-"Procfile.dev"}
	if [ ! -f "$procfile" ]; then
		echo "Specified Procfile '$procfile' not found."
		exit 1
	fi

	# Determine which environment file to use
	local env_file=".env.development"
	[ ! -f "$env_file" ] && env_file=".env"

	# Load environment variables
	load_env "$env_file"

	# Start processes defined in the Procfile
	start_processes "$procfile"
}

# Execute the main function with provided arguments
main "$@"
